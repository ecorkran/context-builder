import { describe, it, expect } from 'vitest';
import { ProjectData, CreateProjectData, UpdateProjectData } from '../../services/storage/types/ProjectData';

describe('Task File Data Structure Tests', () => {
  // Test data structure compatibility and serialization

  const generateTaskFileName = (slice: string): string => {
    if (!slice) return '';
    const sliceMatch = slice.match(/^(\d+)-slice\.(.+)$/);
    if (sliceMatch) {
      const [, sliceNumber, sliceName] = sliceMatch;
      return `${sliceNumber}-tasks.${sliceName}`;
    }
    return slice.replace('slice', 'tasks');
  };

  it('should include taskFile in ProjectData structure for persistence', () => {
    // Test that ProjectData includes taskFile field
    const projectData: ProjectData = {
      id: 'test-project',
      name: 'Test Project',
      template: 'react',
      slice: '031-slice.hero-section',
      taskFile: '031-tasks.hero-section',
      instruction: 'implementation',
      workType: 'continue',
      isMonorepo: false,
      customData: {},
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // Verify taskFile is properly typed and accessible
    expect(projectData.taskFile).toBe('031-tasks.hero-section');
    expect(typeof projectData.taskFile).toBe('string');

    // Test JSON serialization/deserialization (simulating storage persistence)
    const serialized = JSON.stringify(projectData);
    const deserialized: ProjectData = JSON.parse(serialized);

    expect(deserialized.taskFile).toBe('031-tasks.hero-section');
  });

  it('should support CreateProjectData with optional taskFile', () => {
    // Test CreateProjectData type compatibility
    const createData: CreateProjectData = {
      name: 'New Project',
      template: 'vue',
      slice: '055-slice.dashboard',
      taskFile: '055-tasks.dashboard', // Optional field
      isMonorepo: false
    };

    expect(createData.taskFile).toBe('055-tasks.dashboard');

    // Test CreateProjectData without taskFile (should be valid)
    const createDataWithoutTaskFile: CreateProjectData = {
      name: 'New Project 2',
      template: 'angular',
      slice: '066-slice.profile',
      isMonorepo: false
      // taskFile omitted (should be valid due to optional)
    };

    expect(createDataWithoutTaskFile.taskFile).toBeUndefined();

    // Verify fallback generation works
    const fallbackTaskFile = generateTaskFileName(createDataWithoutTaskFile.slice);
    expect(fallbackTaskFile).toBe('066-tasks.profile');
  });

  it('should support UpdateProjectData with taskFile updates', () => {
    // Test UpdateProjectData type compatibility for taskFile updates
    const updateData: UpdateProjectData = {
      taskFile: 'updated-custom-task-file'
    };

    expect(updateData.taskFile).toBe('updated-custom-task-file');

    // Test partial update with multiple fields including taskFile
    const partialUpdate: UpdateProjectData = {
      name: 'Updated Project Name',
      slice: '777-slice.updated',
      taskFile: 'custom-task-name'
    };

    expect(partialUpdate.taskFile).toBe('custom-task-name');
    expect(partialUpdate.name).toBe('Updated Project Name');
    expect(partialUpdate.slice).toBe('777-slice.updated');
  });

  it('should demonstrate taskFile persistence patterns', () => {
    // Test the data transformation patterns used in the app

    // Pattern 1: Auto-generation from slice
    const slice1 = '300-slice.api-integration';
    const autoGenerated1 = generateTaskFileName(slice1);
    expect(autoGenerated1).toBe('300-tasks.api-integration');

    // Pattern 2: User enters custom taskFile value
    const userCustom = 'my-special-task-file-name';

    // Pattern 3: Simulate form data persistence with both patterns
    const projectWithAutoGen: ProjectData = {
      id: 'project-1',
      name: 'Auto Project',
      template: 'react',
      slice: slice1,
      taskFile: autoGenerated1,
      instruction: 'implementation',
      workType: 'continue',
      isMonorepo: false,
      customData: {},
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    const projectWithCustom: ProjectData = {
      id: 'project-2',
      name: 'Custom Project',
      template: 'vue',
      slice: '400-slice.user-auth',
      taskFile: userCustom,
      instruction: 'implementation',
      workType: 'continue',
      isMonorepo: false,
      customData: {},
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    // Simulate JSON persistence (what actually happens in storage)
    const serialized1 = JSON.stringify(projectWithAutoGen);
    const serialized2 = JSON.stringify(projectWithCustom);

    const restored1: ProjectData = JSON.parse(serialized1);
    const restored2: ProjectData = JSON.parse(serialized2);

    // Verify persistence maintains taskFile values
    expect(restored1.taskFile).toBe('300-tasks.api-integration');
    expect(restored2.taskFile).toBe('my-special-task-file-name');

    // This demonstrates that taskFile values will persist correctly across sessions
  });
});